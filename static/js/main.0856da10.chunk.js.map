{"version":3,"sources":["Calculator/operators.ts","Calculator/Input.tsx","Calculator/Output.tsx","App.tsx","useStorage.js","index.js"],"names":["operatorLookup","add","multiply","subtract","divide","operatorFromKey","Enter","total","operations","reduce","acc","operation","number","parseFloat","value","operator","Input","addRow","reset","currentInput","onInputChange","inputRef","useRef","style","display","ref","type","width","height","onKeyPress","e","key","onChange","target","justifyContent","styles","button","onClick","longestStart","op","Intl","NumberFormat","format","length","copy","map","formattedValue","isSubtract","Array","fill","join","current","focus","window","confirm","cursor","backgroundColor","marginLeft","color","fontSize","textAlign","alignItems","Output","overflow","index","undefined","initialState","App","useState","state","setState","useEffect","existingState","localStorage","getItem","JSON","parse","setItem","stringify","useStorage","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0856da10.chunk.js","sourcesContent":["export type Operation = { operator: string; value: string };\n\nexport const operatorLookup: any = {\n  add: '+',\n  multiply: '*',\n  subtract: '-',\n  divide: '/',\n};\n\nexport const operatorFromKey: any = {\n  '+': 'add',\n  '-': 'subtract',\n  '*': 'multiply',\n  '/': 'divide',\n  Enter: 'add',\n};\n\nexport const total = (operations: Operation[]) => {\n  return operations.reduce((acc, operation) => {\n    let number = parseFloat(operation.value);\n\n    if (operation.operator === 'add') {\n      return acc + number;\n    }\n    if (operation.operator === 'multiply') {\n      return acc * number;\n    }\n    if (operation.operator === 'subtract') {\n      return acc - number;\n    }\n    if (operation.operator === 'divide') {\n      return acc / number;\n    }\n    return acc;\n  }, 0);\n};\n","import React, { CSSProperties, useRef } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { total } from './operators';\nimport { Operation, operatorFromKey, operatorLookup } from './operators';\n\ntype Props = {\n  currentInput: string;\n  onInputChange: (value: string) => any;\n  reset: () => any;\n  operations: Operation[];\n  addRow: (operation: string) => any;\n};\n\nexport const Input = ({\n  addRow,\n  reset,\n  operations,\n  currentInput,\n  onInputChange,\n}: Props) => {\n  let inputRef = useRef<HTMLInputElement | null>(null);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        style={{ width: '70%', height: 36 }}\n        value={currentInput}\n        onKeyPress={(e) => {\n          let operator = operatorFromKey[e.key];\n          if (currentInput && operator && parseFloat(currentInput))\n            addRow(operator);\n        }}\n        onChange={(e) => {\n          if (operatorFromKey[e.target.value]) return;\n          onInputChange(e.target.value);\n        }}\n      />\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <div\n          style={styles.button}\n          onClick={() => {\n            let longestStart = operations.reduce(\n              (acc, op) =>\n                new Intl.NumberFormat().format(parseFloat(op.value)).length >\n                acc\n                  ? op.value.length\n                  : acc,\n              0,\n            );\n            // this looks so messy but it works and i made it in 5 minutes lol\n            copy(\n              `${operations\n                .map((operation) => {\n                  let formattedValue = new Intl.NumberFormat().format(\n                    parseFloat(operation.value),\n                  );\n                  let isSubtract = operation.operator === 'subtract';\n\n                  return `${formattedValue} ${new Array(\n                    longestStart - formattedValue.length + 20,\n                  )\n                    .fill(0)\n                    .map((op) => ' ')\n                    .join('&nbsp;')} ${\n                    isSubtract ? '<span style=\"color:red;\">' : ''\n                  }${operatorLookup[operation.operator]}${\n                    isSubtract ? '</span>' : ''\n                  }`;\n                })\n                .join('<br />')}<br />\n${total(operations)}\n            `,\n              { format: 'text/html' },\n            );\n            inputRef.current?.focus();\n          }}\n        >\n          <span>C</span>\n        </div>\n        <div\n          style={styles.button}\n          onClick={() => {\n            if (!window.confirm('Are you sure?')) return;\n            reset();\n            inputRef.current?.focus();\n          }}\n        >\n          <span>R</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst styles: { [key: string]: CSSProperties } = {\n  button: {\n    cursor: 'pointer',\n    backgroundColor: '#2C4251',\n    marginLeft: 5,\n    width: 40,\n    height: 40,\n    color: '#D16666',\n    fontSize: 30,\n    textAlign: 'center',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n};\n","import React from 'react';\nimport { Operation, operatorLookup, total } from './operators';\n\ntype Props = {\n  operations: Operation[];\n};\n\nexport const Output = ({ operations }: Props) => {\n  return (\n    <div style={{ height: 200, overflow: 'scroll', width: '100%' }}>\n      {operations.map((operation, index) => {\n        let isSubtract = operation.operator === 'subtract';\n        return (\n          <div\n            key={index}\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div>\n              ${new Intl.NumberFormat().format(parseFloat(operation.value))}\n            </div>\n            <div style={{ color: isSubtract ? 'red' : undefined }}>\n              {operatorLookup[operation.operator]}\n            </div>\n          </div>\n        );\n      })}\n\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <div>${total(operations)}</div>\n        <div>total</div>\n      </div>\n    </div>\n  );\n};\n","import { Input } from 'Calculator/Input';\nimport { Operation } from 'Calculator/operators';\nimport { Output } from 'Calculator/Output';\nimport React from 'react';\nimport { useStorage } from 'useStorage';\n\ntype State = {\n  operations: Operation[];\n  currentInput: string;\n};\nconst initialState = {\n  operations: [],\n  currentInput: '',\n};\n\nfunction App() {\n  let [state, setState] = useStorage(initialState);\n  return (\n    <div className=\"wrapper\">\n      <div>\n        <Output operations={state.operations} />\n        <Input\n          operations={state.operations}\n          currentInput={state.currentInput}\n          onInputChange={(currentInput) => setState({ ...state, currentInput })}\n          reset={() => setState(initialState)}\n          addRow={(operator) =>\n            setState({\n              ...state,\n              currentInput: '',\n              operations: [\n                ...state.operations,\n                { operator, value: state.currentInput },\n              ],\n            })\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport const useStorage = (initialState) => {\n  let [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    let existingState = localStorage.getItem('state');\n    if (existingState) setState(JSON.parse(existingState));\n  }, []);\n\n  return [\n    state,\n    (state) => {\n      setState(state);\n      localStorage.setItem('state', JSON.stringify(state));\n    },\n  ];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}