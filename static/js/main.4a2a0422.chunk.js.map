{"version":3,"sources":["Calculator/operators.ts","Calculator/Input.tsx","Calculator/Output.tsx","useScrollToBottom.ts","App.tsx","useStorage.js","index.js"],"names":["operatorLookup","add","multiply","subtract","divide","operatorFromKey","Enter","total","operations","result","reduce","acc","operation","number","parseFloat","value","operator","Intl","NumberFormat","format","Input","addRow","reset","currentInput","onInputChange","inputRef","useRef","style","display","ref","type","width","height","onKeyPress","e","key","onChange","target","justifyContent","styles","button","onClick","a","longestStart","op","length","sum","text","map","formattedValue","isSubtract","Array","fill","join","copy","window","confirm","current","focus","cursor","backgroundColor","marginLeft","paddingLeft","paddingRight","color","fontSize","textAlign","alignItems","Output","container","messages","scrollContainer","useEffect","scrollTo","scrollHeight","useScrollToBottom","overflow","marginBottom","index","undefined","marginRight","initialState","App","useState","state","setState","existingState","localStorage","getItem","JSON","parse","setItem","stringify","useStorage","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a2a0422.chunk.js","sourcesContent":["export type Operation = { operator: string; value: string };\n\nexport const operatorLookup: any = {\n  add: '+',\n  multiply: '*',\n  subtract: '-',\n  divide: '/',\n};\n\nexport const operatorFromKey: any = {\n  '+': 'add',\n  '-': 'subtract',\n  '*': 'multiply',\n  '/': 'divide',\n  Enter: 'add',\n};\n\nexport const total = (operations: Operation[]) => {\n  let result = operations.reduce((acc, operation) => {\n    let number = parseFloat(operation.value);\n\n    if (operation.operator === 'add') {\n      return acc + number;\n    }\n    if (operation.operator === 'multiply') {\n      return acc * number;\n    }\n    if (operation.operator === 'subtract') {\n      return acc - number;\n    }\n    if (operation.operator === 'divide') {\n      return acc / number;\n    }\n    return acc;\n  }, 0);\n  return new Intl.NumberFormat().format(result);\n};\n","import React, { CSSProperties, useRef } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { total } from './operators';\nimport { Operation, operatorFromKey, operatorLookup } from './operators';\n\ntype Props = {\n  currentInput: string;\n  onInputChange: (value: string) => any;\n  reset: () => any;\n  operations: Operation[];\n  addRow: (operation: string) => any;\n};\n\nexport const Input = ({\n  addRow,\n  reset,\n  operations,\n  currentInput,\n  onInputChange,\n}: Props) => {\n  let inputRef = useRef<HTMLInputElement | null>(null);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        style={{ width: '70%', height: 36 }}\n        value={currentInput}\n        onKeyPress={(e) => {\n          let operator = operatorFromKey[e.key];\n\n          if (currentInput && operator && parseFloat(currentInput))\n            addRow(operator);\n        }}\n        onChange={(e) => {\n          if (operatorFromKey[e.target.value]) return;\n          onInputChange(e.target.value);\n        }}\n      />\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <div\n          style={styles.button}\n          onClick={async () => {\n            let longestStart = operations.reduce(\n              (acc, op) =>\n                new Intl.NumberFormat().format(parseFloat(op.value)).length >\n                acc\n                  ? op.value.length\n                  : acc,\n              0,\n            );\n            let sum = total(operations);\n            // this looks so messy but it works and i made it in 5 minutes lol\n            let text = `${operations\n              .map((operation) => {\n                let formattedValue = new Intl.NumberFormat().format(\n                  parseFloat(operation.value),\n                );\n                let isSubtract = operation.operator === 'subtract';\n\n                return `${\n                  isSubtract ? '<span style=\"color:red;\">' : ''\n                }${formattedValue}${isSubtract ? '</span>' : ''} ${new Array(\n                  longestStart - formattedValue.length + 10,\n                )\n                  .fill(0)\n                  .map((op) => ' ')\n                  .join('&nbsp;')} ${operatorLookup[operation.operator]}`;\n              })\n              .join('<br />\\n')}<br />\\n\n${sum} ${new Array(longestStart - sum.length + 10)\n              .fill(0)\n              .map((op) => ' ')\n              .join('&nbsp;')} total`;\n\n            copy(text, { format: 'text/html' });\n          }}\n        >\n          <span>Copy</span>\n        </div>\n        <div\n          style={styles.button}\n          onClick={() => {\n            if (!window.confirm('Are you sure?')) return;\n            reset();\n            inputRef.current?.focus();\n          }}\n        >\n          <span>Reset</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst styles: { [key: string]: CSSProperties } = {\n  button: {\n    cursor: 'pointer',\n    backgroundColor: '#D16666',\n    marginLeft: 5,\n    paddingLeft: 5,\n    paddingRight: 5,\n    height: 40,\n    color: '#2C4251',\n    fontSize: 30,\n    textAlign: 'center',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n};\n","import React from 'react';\nimport { useScrollToBottom } from 'useScrollToBottom';\nimport { Operation, operatorLookup, total } from './operators';\n\ntype Props = {\n  operations: Operation[];\n};\n\nexport const Output = ({ operations }: Props) => {\n  let container = useScrollToBottom(operations);\n  let longestStart = operations.reduce(\n    (acc, op) =>\n      new Intl.NumberFormat().format(parseFloat(op.value)).length > acc\n        ? op.value.length\n        : acc,\n    0,\n  );\n  return (\n    <div\n      style={{\n        height: 300,\n        overflow: 'scroll',\n        width: '70%',\n        marginBottom: 12,\n      }}\n      ref={(ref) => (container.current = ref)}\n    >\n      {operations.map((operation, index) => {\n        let isSubtract = operation.operator === 'subtract';\n        return (\n          <div\n            key={index}\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div style={{ color: isSubtract ? '#FF1B1C' : undefined }}>\n              ${new Intl.NumberFormat().format(parseFloat(operation.value))}\n            </div>\n            <div style={{ marginRight: 10 }}>\n              {operatorLookup[operation.operator]}\n            </div>\n          </div>\n        );\n      })}\n\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <div>${total(operations)}</div>\n        <div style={{ marginRight: 10 }}>total</div>\n      </div>\n    </div>\n  );\n};\n","import { useRef, useEffect } from 'react';\n\nexport const useScrollToBottom = (messages: any) => {\n  let scrollContainer = useRef<HTMLDivElement | null | undefined>();\n\n  useEffect(() => {\n    if (!scrollContainer?.current) return;\n\n    scrollContainer.current.scrollTo(0, scrollContainer.current.scrollHeight);\n  }, [messages]);\n\n  return scrollContainer;\n};\n","import { Input } from 'Calculator/Input';\nimport { Operation } from 'Calculator/operators';\nimport { Output } from 'Calculator/Output';\nimport React from 'react';\nimport { useStorage } from 'useStorage';\n\ntype State = {\n  operations: Operation[];\n  currentInput: string;\n};\nconst initialState = {\n  operations: [],\n  currentInput: '',\n};\n\nfunction App() {\n  let [state, setState] = useStorage(initialState);\n  return (\n    <div className=\"wrapper\">\n      <div>\n        <Output operations={state.operations} />\n        <Input\n          operations={state.operations}\n          currentInput={state.currentInput}\n          onInputChange={(currentInput) => setState({ ...state, currentInput })}\n          reset={() => setState(initialState)}\n          addRow={(operator) =>\n            setState({\n              ...state,\n              currentInput: '',\n              operations: [\n                ...state.operations,\n                { operator, value: state.currentInput },\n              ],\n            })\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport const useStorage = (initialState) => {\n  let [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    let existingState = localStorage.getItem('state');\n    if (existingState) setState(JSON.parse(existingState));\n  }, []);\n\n  return [\n    state,\n    (state) => {\n      setState(state);\n      localStorage.setItem('state', JSON.stringify(state));\n    },\n  ];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}