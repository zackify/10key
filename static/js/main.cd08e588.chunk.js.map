{"version":3,"sources":["Calculator/operators.ts","Calculator/Input.tsx","Calculator/Output.tsx","useScrollToBottom.ts","App.tsx","useStorage.js","index.js"],"names":["operatorLookup","add","multiply","subtract","divide","total","operatorFromKey","operations","result","reduce","acc","operation","number","parseFloat","value","operator","formatted","toMoney","raw","Intl","NumberFormat","format","Input","addRow","reset","currentInput","onInputChange","inputRef","useRef","style","display","ref","type","width","height","onKeyPress","e","key","onChange","target","justifyContent","styles","button","onClick","a","longestStart","op","numlen","length","sum","text","map","formattedValue","Array","fill","join","copy","window","confirm","current","focus","cursor","backgroundColor","marginLeft","paddingLeft","paddingRight","color","fontSize","textAlign","alignItems","Output","removeItem","container","messages","scrollContainer","useEffect","scrollTo","scrollHeight","useScrollToBottom","marginTop","overflow","marginBottom","index","isSubtract","borderBottom","paddingTop","paddingBottom","undefined","marginRight","initialState","App","useState","state","setState","existingState","localStorage","getItem","JSON","parse","setItem","stringify","useStorage","className","filter","_","cur","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd08e588.chunk.js","sourcesContent":["export type Operation = { operator: string; value: string };\n\nexport const operatorLookup: any = {\n  add: '+',\n  multiply: '*',\n  subtract: '-',\n  divide: '/',\n  total: 'total',\n};\n\nexport const operatorFromKey: any = {\n  '+': 'add',\n  '-': 'subtract',\n  '*': 'multiply',\n  '/': 'divide',\n};\n\nexport const total = (operations: Operation[]) => {\n  let result = operations.reduce((acc, operation) => {\n    let number = parseFloat(operation.value);\n\n    if (operation.operator === 'add') {\n      return acc + number;\n    }\n    if (operation.operator === 'multiply') {\n      return acc * number;\n    }\n    if (operation.operator === 'subtract') {\n      return acc - number;\n    }\n    if (operation.operator === 'divide') {\n      return acc / number;\n    }\n    return acc;\n  }, 0);\n  return { formatted: toMoney(result), raw: result };\n};\n\nexport const toMoney = (number: number) => {\n  return new Intl.NumberFormat().format(number);\n};\n","import React, { CSSProperties, useRef } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { toMoney, total } from './operators';\nimport { Operation, operatorFromKey, operatorLookup } from './operators';\n\ntype Props = {\n  currentInput: string;\n  onInputChange: (value: string) => any;\n  reset: () => any;\n  operations: Operation[];\n  addRow: (operation: string, value?: any) => any;\n};\n\nexport const Input = ({\n  addRow,\n  reset,\n  operations,\n  currentInput,\n  onInputChange,\n}: Props) => {\n  let inputRef = useRef<HTMLInputElement | null>(null);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        style={{ width: '70%', height: 36 }}\n        value={currentInput}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter' && !currentInput)\n            return addRow('total', total(operations).raw);\n          let operator = operatorFromKey[e.key];\n\n          if (currentInput && operator && parseFloat(currentInput))\n            addRow(operator);\n        }}\n        onChange={(e) => {\n          if (operatorFromKey[e.target.value]) return;\n          onInputChange(e.target.value);\n        }}\n      />\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <div\n          style={styles.button}\n          onClick={async () => {\n            let longestStart = operations.reduce((acc, op) => {\n              let numlen = toMoney(parseFloat(op.value)).length;\n              return numlen > acc ? numlen : acc;\n            }, 0);\n            let sum = total(operations).formatted;\n            // this looks so messy but it works and i made it in 5 minutes lol\n            let text = `${operations\n              .map((operation) => {\n                let formattedValue = toMoney(parseFloat(operation.value));\n\n                return `${formattedValue} ${new Array(\n                  longestStart - formattedValue.length + 10,\n                )\n                  .fill(0)\n                  .map(() => '')\n                  .join(' ')} ${operatorLookup[operation.operator]}`;\n              })\n              .join('\\n')}\\n\n${sum} ${new Array(longestStart - sum.length + 10)\n              .fill(0)\n              .map((op) => '')\n              .join(' ')} total`;\n\n            copy(text, { format: 'text/plain' });\n          }}\n        >\n          <span>Copy</span>\n        </div>\n        <div\n          style={styles.button}\n          onClick={() => {\n            if (!window.confirm('Are you sure?')) return;\n            reset();\n            inputRef.current?.focus();\n          }}\n        >\n          <span>Reset</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst styles: { [key: string]: CSSProperties } = {\n  button: {\n    cursor: 'pointer',\n    backgroundColor: '#D16666',\n    marginLeft: 5,\n    paddingLeft: 5,\n    paddingRight: 5,\n    height: 40,\n    color: '#2C4251',\n    fontSize: 30,\n    textAlign: 'center',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n};\n","import React from 'react';\nimport { useScrollToBottom } from 'useScrollToBottom';\nimport { Operation, operatorLookup, toMoney, total } from './operators';\n\ntype Props = {\n  operations: Operation[];\n  removeItem: (index: number) => any;\n};\n\nexport const Output = ({ operations, removeItem }: Props) => {\n  let container = useScrollToBottom(operations);\n\n  return (\n    <div\n      style={{\n        marginTop: 20,\n        height: 300,\n        overflow: 'scroll',\n        width: 350,\n        marginBottom: 12,\n      }}\n      ref={(ref) => (container.current = ref)}\n    >\n      {operations.map((operation, index) => {\n        let isSubtract = operation.operator === 'subtract';\n        return (\n          <div\n            key={index}\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              borderBottom: '1px solid #FFFFFC',\n              paddingTop: 4,\n              paddingBottom: 4,\n            }}\n          >\n            <div style={{ color: isSubtract ? '#FF1B1C' : undefined }}>\n              ${toMoney(parseFloat(operation.value))}\n            </div>\n            <div\n              style={{\n                marginRight: 10,\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              {operatorLookup[operation.operator]}\n              <div\n                style={{ fontSize: 10, marginLeft: 12, cursor: 'pointer' }}\n                onClick={() => removeItem(index)}\n              >\n                Delete\n              </div>\n            </div>\n          </div>\n        );\n      })}\n\n      <div\n        style={{\n          display: 'flex',\n          paddingTop: 4,\n          paddingBottom: 4,\n          justifyContent: 'space-between',\n        }}\n      >\n        <div>${total(operations).formatted}</div>\n        <div style={{ marginRight: 10 }}>running total</div>\n      </div>\n    </div>\n  );\n};\n","import { useRef, useEffect } from 'react';\n\nexport const useScrollToBottom = (messages: any) => {\n  let scrollContainer = useRef<HTMLDivElement | null | undefined>();\n\n  useEffect(() => {\n    if (!scrollContainer?.current) return;\n\n    scrollContainer.current.scrollTo(0, scrollContainer.current.scrollHeight);\n  }, [messages]);\n\n  return scrollContainer;\n};\n","import { Input } from 'Calculator/Input';\nimport { Operation } from 'Calculator/operators';\nimport { Output } from 'Calculator/Output';\nimport React from 'react';\nimport { useStorage } from 'useStorage';\n\ntype State = {\n  operations: Operation[];\n  currentInput: string;\n};\nconst initialState = {\n  operations: [],\n  currentInput: '',\n};\n\nfunction App() {\n  let [state, setState] = useStorage(initialState);\n\n  return (\n    <div className=\"wrapper\">\n      <div>\n        <Output\n          operations={state.operations}\n          removeItem={(index) =>\n            setState({\n              ...state,\n              operations: (state as State).operations.filter(\n                (_, cur) => cur !== index,\n              ),\n            })\n          }\n        />\n        <Input\n          operations={state.operations}\n          currentInput={state.currentInput}\n          onInputChange={(currentInput) => setState({ ...state, currentInput })}\n          reset={() => setState(initialState)}\n          addRow={(operator, value) =>\n            setState({\n              ...state,\n              currentInput: '',\n              operations: [\n                ...state.operations,\n                { operator, value: value || state.currentInput },\n              ],\n            })\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport const useStorage = (initialState) => {\n  let [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    let existingState = localStorage.getItem('state');\n    if (existingState) setState(JSON.parse(existingState));\n  }, []);\n\n  return [\n    state,\n    (state) => {\n      setState(state);\n      localStorage.setItem('state', JSON.stringify(state));\n    },\n  ];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}