{"version":3,"sources":["Calculator/operators.ts","Calculator/Input.tsx","useScrollToBottom.ts","Calculator/Output.tsx","Calculator/CopyOutput.tsx","App.tsx","useStorage.js","index.js"],"names":["operatorLookup","add","multiply","subtract","divide","total","operatorFromKey","operations","result","reduce","acc","operation","number","parseFloat","value","operator","formatted","toMoney","raw","Intl","NumberFormat","format","Input","addRow","reset","currentInput","onInputChange","inputRef","useRef","style","display","ref","type","width","height","onKeyPress","e","key","onChange","target","justifyContent","styles","button","onClick","current","focus","window","confirm","cursor","backgroundColor","marginLeft","paddingLeft","paddingRight","color","fontSize","textAlign","alignItems","useScrollToBottom","messages","scrollContainer","useEffect","scrollTo","scrollHeight","Output","removeItem","container","marginTop","overflow","marginBottom","map","index","isSubtract","borderBottom","paddingTop","paddingBottom","undefined","marginRight","CopyOutput","borderRadius","borderColor","borderStyle","borderWidth","padding","minHeight","initialState","App","useState","state","setState","existingState","localStorage","getItem","JSON","parse","setItem","stringify","useStorage","className","filter","_","cur","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c09e59d1.chunk.js","sourcesContent":["export type Operation = { operator: string; value: string };\n\nexport const operatorLookup: any = {\n  add: '+',\n  multiply: '*',\n  subtract: '-',\n  divide: '/',\n  total: 'total',\n};\n\nexport const operatorFromKey: any = {\n  '+': 'add',\n  '-': 'subtract',\n  '*': 'multiply',\n  '/': 'divide',\n};\n\nexport const total = (operations: Operation[]) => {\n  let result = operations.reduce((acc, operation) => {\n    let number = parseFloat(operation.value);\n\n    if (operation.operator === 'add') {\n      return acc + number;\n    }\n    if (operation.operator === 'multiply') {\n      return acc * number;\n    }\n    if (operation.operator === 'subtract') {\n      return acc - number;\n    }\n    if (operation.operator === 'divide') {\n      return acc / number;\n    }\n    return acc;\n  }, 0);\n  return { formatted: toMoney(result), raw: result };\n};\n\nexport const toMoney = (number: number) => {\n  return new Intl.NumberFormat().format(number);\n};\n","import React, { CSSProperties, useRef } from 'react';\nimport {  total } from './operators';\nimport { Operation, operatorFromKey } from './operators';\n\ntype Props = {\n  currentInput: string;\n  onInputChange: (value: string) => any;\n  reset: () => any;\n  operations: Operation[];\n  addRow: (operation: string, value?: any) => any;\n};\n\nexport const Input = ({\n  addRow,\n  reset,\n  operations,\n  currentInput,\n  onInputChange,\n}: Props) => {\n  let inputRef = useRef<HTMLInputElement | null>(null);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        style={{ width: '70%', height: 36 }}\n        value={currentInput}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter' && !currentInput)\n            return addRow('total', total(operations).raw);\n          let operator = operatorFromKey[e.key];\n\n          if (currentInput && operator && parseFloat(currentInput))\n            addRow(operator);\n        }}\n        onChange={(e) => {\n          if (operatorFromKey[e.target.value]) return;\n          onInputChange(e.target.value);\n        }}\n      />\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <div\n          style={styles.button}\n          onClick={() => {\n              onInputChange('');\n              inputRef.current?.focus();\n            }}\n        >\n          <span>Clear</span>\n        </div>\n        <div\n          style={styles.button}\n          onClick={() => {\n            if (!window.confirm('Are you sure?')) return;\n            reset();\n            inputRef.current?.focus();\n          }}\n        >\n          <span>Reset</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst styles: { [key: string]: CSSProperties } = {\n  button: {\n    cursor: 'pointer',\n    backgroundColor: '#D16666',\n    marginLeft: 5,\n    paddingLeft: 5,\n    paddingRight: 5,\n    height: 40,\n    color: '#2C4251',\n    fontSize: 30,\n    textAlign: 'center',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n};\n","import { useRef, useEffect } from 'react';\n\nexport const useScrollToBottom = (messages: any) => {\n  let scrollContainer = useRef<HTMLDivElement | null | undefined>();\n\n  useEffect(() => {\n    if (!scrollContainer?.current) return;\n\n    scrollContainer.current.scrollTo(0, scrollContainer.current.scrollHeight);\n  }, [messages]);\n\n  return scrollContainer;\n};\n","import React from 'react';\nimport { useScrollToBottom } from 'useScrollToBottom';\nimport { Operation, operatorLookup, toMoney, total } from './operators';\n\ntype Props = {\n  operations: Operation[];\n  removeItem: (index: number) => any;\n};\n\nexport const Output = ({ operations, removeItem }: Props) => {\n  let container = useScrollToBottom(operations);\n\n  return (\n    <div\n      style={{\n        marginTop: 20,\n        height: 300,\n        overflow: 'scroll',\n        width: 350,\n        marginBottom: 12,\n      }}\n      ref={(ref) => (container.current = ref)}\n    >\n      {operations.map((operation, index) => {\n        let isSubtract = operation.operator === 'subtract';\n        return (\n          <div\n            key={index}\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              borderBottom: '1px solid #FFFFFC',\n              paddingTop: 4,\n              paddingBottom: 4,\n            }}\n          >\n            <div style={{ color: isSubtract ? '#FF1B1C' : undefined }}>\n              ${toMoney(parseFloat(operation.value))}\n            </div>\n            <div\n              style={{\n                marginRight: 10,\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              {operatorLookup[operation.operator]}\n              <div\n                style={{ fontSize: 10, marginLeft: 12, cursor: 'pointer' }}\n                onClick={() => removeItem(index)}\n              >\n                Delete\n              </div>\n            </div>\n          </div>\n        );\n      })}\n\n      <div\n        style={{\n          display: 'flex',\n          paddingTop: 4,\n          paddingBottom: 4,\n          justifyContent: 'space-between',\n        }}\n      >\n        <div>${total(operations).formatted}</div>\n        <div style={{ marginRight: 10 }}>running total</div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useScrollToBottom } from 'useScrollToBottom';\nimport { Operation, operatorLookup, toMoney } from './operators';\n\ntype Props = {\n  operations: Operation[];\n  removeItem: (index: number) => any;\n};\n\nexport const CopyOutput = ({ operations, removeItem }: Props) => {\n  let container = useScrollToBottom(operations);\n\n  return (\n    <div\n      style={{\n        marginTop: 20,\n        overflow: 'scroll',\n        width: 250,\n        marginBottom: 12,\n        backgroundColor: '#fff',\n        borderRadius: 4,\n        borderColor: '#000',\n        borderStyle: 'solid',\n        borderWidth: 2,\n        padding: 13,\n        minHeight: 300,\n      }}\n      ref={(ref) => (container.current = ref)}\n    >\n      {operations.map((operation, index) => {\n        let isSubtract = operation.operator === 'subtract';\n        return (\n          <div\n            key={index}\n            style={{\n              display: 'flex',\n              justifyContent: 'flex-end',\n              paddingTop: 4,\n              paddingBottom: 4,\n            }}\n          >\n            <div style={{ color: isSubtract ? '#FF1B1C' : '#000' }}>\n              {toMoney(parseFloat(operation.value))}\n            </div>\n            <div\n              style={{\n                marginLeft: 10,\n                marginRight:\n                  operatorLookup[operation.operator] === 'total' ? 0 : 10,\n                display: 'flex',\n                alignItems: 'center',\n                color: isSubtract ? '#FF1B1C' : '#000',\n              }}\n            >\n              {operatorLookup[operation.operator] === 'total'\n                ? ''\n                : operatorLookup[operation.operator]}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import { Input } from 'Calculator/Input';\nimport { Operation } from 'Calculator/operators';\nimport { Output } from 'Calculator/Output';\nimport { CopyOutput } from 'Calculator/CopyOutput';\nimport React from 'react';\nimport { useStorage } from 'useStorage';\n\ntype State = {\n  operations: Operation[];\n  currentInput: string;\n};\nconst initialState = {\n  operations: [],\n  currentInput: '',\n};\n\nfunction App() {\n  let [state, setState] = useStorage(initialState);\n\n  return (\n    <div className=\"wrapper\">\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          justifyContent: 'space-between',\n        }}\n      >\n        <div>\n          <Output\n            operations={state.operations}\n            removeItem={(index) =>\n              setState({\n                ...state,\n                operations: (state as State).operations.filter(\n                  (_, cur) => cur !== index\n                ),\n              })\n            }\n          />\n          <Input\n            operations={state.operations}\n            currentInput={state.currentInput}\n            onInputChange={(currentInput) =>\n              setState({ ...state, currentInput })\n            }\n            reset={() => setState(initialState)}\n            addRow={(operator, value) =>\n              setState({\n                ...state,\n                currentInput: '',\n                operations: [\n                  ...state.operations,\n                  { operator, value: value || state.currentInput },\n                ],\n              })\n            }\n          />\n        </div>\n\n        <CopyOutput\n          operations={state.operations}\n          removeItem={(index) =>\n            setState({\n              ...state,\n              operations: (state as State).operations.filter(\n                (_, cur) => cur !== index\n              ),\n            })\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport const useStorage = (initialState) => {\n  let [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    let existingState = localStorage.getItem('state');\n    if (existingState) setState(JSON.parse(existingState));\n  }, []);\n\n  return [\n    state,\n    (state) => {\n      setState(state);\n      localStorage.setItem('state', JSON.stringify(state));\n    },\n  ];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}