{"version":3,"sources":["Calculator/operators.ts","Calculator/Output.tsx","Calculator/Input.tsx","App.tsx","index.js"],"names":["operatorLookup","add","multiply","subtract","operatorFromKey","total","operations","reduce","acc","operation","number","parseFloat","value","operator","Output","style","height","overflow","width","map","index","key","display","justifyContent","Intl","NumberFormat","format","Input","addRow","reset","currentInput","onInputChange","inputRef","useRef","ref","type","onKeyPress","e","onChange","target","styles","button","onClick","longestStart","op","length","console","log","copy","formattedValue","Array","fill","join","current","focus","window","confirm","cursor","backgroundColor","marginLeft","color","fontSize","textAlign","alignItems","initialState","App","useState","state","setState","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9266726.chunk.js","sourcesContent":["export type Operation = { operator: string; value: string };\n\nexport const operatorLookup: any = {\n  add: '+',\n  multiply: '*',\n  subtract: '-',\n};\n\nexport const operatorFromKey: any = {\n  '+': 'add',\n  '-': 'subtract',\n  '*': 'multiply',\n};\n","import React from 'react';\nimport { Operation, operatorLookup } from './operators';\n\ntype Props = {\n  operations: Operation[];\n};\n\nexport const total = (operations: Operation[]) => {\n  return operations.reduce((acc, operation) => {\n    let number = parseFloat(operation.value);\n\n    if (operation.operator === 'add') {\n      return acc + number;\n    }\n    if (operation.operator === 'multiply') {\n      return acc * number;\n    }\n    if (operation.operator === 'subtract') {\n      return acc - number;\n    }\n    return acc;\n  }, 0);\n};\nexport const Output = ({ operations }: Props) => {\n  return (\n    <div style={{ height: 200, overflow: 'scroll', width: '100%' }}>\n      {operations.map((operation, index) => (\n        <div\n          key={index}\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div>\n            ${new Intl.NumberFormat().format(parseFloat(operation.value))}\n          </div>\n          <div>{operatorLookup[operation.operator]}</div>\n        </div>\n      ))}\n\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <div>${total(operations)}</div>\n        <div>total</div>\n      </div>\n    </div>\n  );\n};\n","import React, { CSSProperties, useRef } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { total } from './Output';\nimport { Operation, operatorFromKey, operatorLookup } from './operators';\n\ntype Props = {\n  currentInput: string;\n  onInputChange: (value: string) => any;\n  reset: () => any;\n  operations: Operation[];\n  addRow: (operation: string) => any;\n};\n\nexport const Input = ({\n  addRow,\n  reset,\n  operations,\n  currentInput,\n  onInputChange,\n}: Props) => {\n  let inputRef = useRef<HTMLInputElement | null>(null);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        style={{ width: '70%', height: 36 }}\n        value={currentInput}\n        onKeyPress={(e) => {\n          let operator = operatorFromKey[e.key];\n          if (currentInput && operator && parseFloat(currentInput))\n            addRow(operator);\n        }}\n        onChange={(e) => {\n          if (operatorFromKey[e.target.value]) return;\n          onInputChange(e.target.value);\n        }}\n      />\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <div\n          style={styles.button}\n          onClick={() => {\n            let longestStart = operations.reduce(\n              (acc, op) =>\n                new Intl.NumberFormat().format(parseFloat(op.value)).length >\n                acc\n                  ? op.value.length\n                  : acc,\n              0,\n            );\n            console.log(longestStart);\n            // this looks so messy but it works and i made it in 5 minutes lol\n            copy(`${operations\n              .map((operation) => {\n                let formattedValue = new Intl.NumberFormat().format(\n                  parseFloat(operation.value),\n                );\n                return `${formattedValue} ${new Array(\n                  longestStart - formattedValue.length + 10,\n                )\n                  .fill(0)\n                  .map((op) => '')\n                  .join(' ')} ${operatorLookup[operation.operator]}`;\n              })\n              .join('\\n')}\n${total(operations)}\n            `);\n            inputRef.current?.focus();\n          }}\n        >\n          <span>C</span>\n        </div>\n        <div\n          style={styles.button}\n          onClick={() => {\n            if (!window.confirm('Are you sure?')) return;\n            reset();\n            inputRef.current?.focus();\n          }}\n        >\n          <span>R</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst styles: { [key: string]: CSSProperties } = {\n  button: {\n    cursor: 'pointer',\n    backgroundColor: '#2C4251',\n    marginLeft: 5,\n    width: 40,\n    height: 40,\n    color: '#D16666',\n    fontSize: 30,\n    textAlign: 'center',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n};\n","import { Input } from 'Calculator/Input';\nimport { Operation } from 'Calculator/operators';\nimport { Output } from 'Calculator/Output';\nimport React, { useState } from 'react';\n\ntype State = {\n  operations: Operation[];\n  currentInput: string;\n};\nconst initialState = {\n  operations: [],\n  currentInput: '',\n};\n\nfunction App() {\n  let [state, setState] = useState<State>(initialState);\n  return (\n    <div className=\"wrapper\">\n      <div>\n        <Output operations={state.operations} />\n        <Input\n          operations={state.operations}\n          currentInput={state.currentInput}\n          onInputChange={(currentInput) => setState({ ...state, currentInput })}\n          reset={() => setState(initialState)}\n          addRow={(operator) =>\n            setState({\n              ...state,\n              currentInput: '',\n              operations: [\n                ...state.operations,\n                { operator, value: state.currentInput },\n              ],\n            })\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}